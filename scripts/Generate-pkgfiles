#!/bin/bash

# Generate package files into given folder from a netinstall.yaml file.
#

DIE() {
    echo "$progname: error: $1" >&2
    Usage
    exit 1
}

Usage() {
    cat <<EOF >&2

Usage: $progname netinstall-yaml [target-folder]
where
   netinstall-yaml     Path to the netinstall.yaml file.
   target-folder       Path to the folder where package files will be generated. Default: "$folder_default"
                       The folder will be created if it doesn't exist.

Both paths can be full or relative paths.
EOF
}

Main() {
    local file="$1"    # path to netinstall.yaml
    local folder="$2"

    local folder_default="."

    local progname="$(basename "$0")"

    [ -n "$file" ] || DIE "please give the (full or relative) path to file netinstall.yaml"
    [ -r "$file" ] || DIE "file '$file' does not exist"

    [ -n "$folder" ] || folder="$folder_default"

    local de
    local DEs=(                 # Used as file names and array indexes.
        eos-base-group

        budgie
        cinnamon
        gnome
        i3
        lxqt
        mate
        plasma
        xfce4
    )
    # These are not found in netinstall.yaml: deepin, openbox

    declare -A rootix            # DE root indexes in netinstall.yaml
    rootix[eos-base-group]=0
    rootix[xfce4]=3
    rootix[plasma]=4
    rootix[gnome]=5
    rootix[i3]=6
    rootix[mate]=7
    rootix[cinnamon]=8
    rootix[budgie]=9
    rootix[lxqt]=10

    mkdir -p $folder

    for de in "${DEs[@]}" ; do
        echo "$folder/$de ..." >&2
        FindFromNetinstall > $folder/$de
    done
}

ExtractName() { grep '"' | cut -d'"' -f2 ; }

FindFromNetinstall() {
    local rix=${rootix[$de]}

    if [ "$(yq .[$rix].subgroups $file)" = "null" ] ; then
        # no subgroups
        yq .[$rix].packages $file | ExtractName
    else
        # get packages from all subgroups
        local ix max_subgroups=50                                     # This must be large enough! Currently at least 13.

        for ((ix=0; ix < max_subgroups; ix++)) ; do
            [ "$(yq .[$rix].subgroups[$ix].packages $file)" = "null" ] && break
            yq .[$rix].subgroups[$ix].packages $file | ExtractName
        done
        [ "$(yq .[$rix].subgroups[$ix].packages $file)" = "null" ] || DIE "$de has more than $max_subgroups subgroups in $file, failing!"
    fi
}

Main "$@"
